import React from 'react';

export interface User { // This is the user from AuthContext (logged-in user)
  id: string; // Appwrite Auth User ID ($id from Appwrite Account)
  email: string;
  name: string;
  role: 'Admin' | 'Support' | 'Viewer'; // Role fetched from admin_users collection
}

// Specific type for user management within the admin panel
// This is stored in the 'admin_users' Appwrite collection
export interface AdminUser {
  $id?: string; // Appwrite document ID for this entry in 'admin_users' collection
  id: string; // Appwrite Auth User ID (maps to $id of an Appwrite Account user)
  email: string;
  name: string;
  role: 'Admin' | 'Support' | 'Viewer'; // Roles managed within the admin panel
  createdAt?: string; // ISO date string (managed by Appwrite as $createdAt for the doc)
  updatedAt?: string; // ISO date string (managed by Appwrite as $updatedAt for the doc)
}


export enum SystemStatusLevel {
  OPERATIONAL = 'Operational',
  DEGRADED = 'Degraded Performance',
  PARTIAL_OUTAGE = 'Partial Outage',
  MAJOR_OUTAGE = 'Major Outage',
  MAINTENANCE = 'Maintenance',
  UNKNOWN = 'Unknown'
}

export enum PingStatus {
  PINGING = 'Pinging',
  ONLINE = 'Online',
  OFFLINE = 'Offline',
  SLOW = 'Slow Response',
  TIMEOUT = 'Timeout',
  ERROR = 'Error',
  UNKNOWN = 'Unknown',
}

export interface PingResult {
  status: PingStatus;
  statusCode?: number;
  responseTimeMs?: number;
  checkedAt: string;
  error?: string;
}

export interface ServiceGroup {
  id: string;
  $id?: string; // Appwrite document ID
  name: string;
  displayOrder: number;
}

export interface ServiceComponent {
  id: string; // Unique ID for the component within the service, e.g., generated by client
  name: string;
  status: SystemStatusLevel;
  description?: string;
}

export interface SystemService {
  id: string;
  $id?: string; // Appwrite document ID
  name: string;
  status: SystemStatusLevel;
  description?: string;
  publicDescription?: string;
  lastCheckedAutomated: string;
  uptime7Days?: number;
  uptime30Days?: number;
  isMonitoredPublicly: boolean;
  displayOrder: number;
  groupId?: string; // Link to ServiceGroup
  components?: ServiceComponent[]; 
  pingUrl?: string;
  lastPingResult?: PingResult;
  pingEnabled: boolean; // Added for ping monitoring
  pingIntervalMinutes: 2 | 5 | 10 | 15; // Added for ping monitoring
  pingAlertsMuted: boolean; // Added for ping monitoring
  updatedAt?: string; // Added to track updates for services, helpful for sorting
}

export enum ActivityStatus {
  SUCCESS = 'Success',
  FAILURE = 'Failure',
  PENDING = 'Pending'
}

// For the existing AdminActivityFeedWidget
export interface UserActivityLog {
  id: string; // Appwrite document $id
  timestamp: string; // ISO Date String, custom field
  userId: string; // Appwrite Auth User ID
  userName:string;
  action: string;
  details?: string;
  status: ActivityStatus;
}

// New comprehensive ActivityLog for site-wide logging
export enum ActivityTargetType {
  USER = 'User', // AdminUser management
  SERVICE = 'Service',
  SERVICE_GROUP = 'Service Group',
  INCIDENT = 'Incident',
  INCIDENT_REVIEW = 'Incident Review', // De-Brief
  API_KEY = 'API Key',
  GUEST_REPORT = 'Guest Report',
  SEVERITY_LEVEL = 'Severity Level',
  INCIDENT_STATUS_TYPE = 'Incident Status Type',
  SITE_IDENTITY = 'Site Identity',
  DECISION_FLOW = 'Decision Flow',
  DISCORD_CONFIG = 'Discord Configuration', // Added
  AUTHENTICATION = 'Authentication', // For login/logout attempts
  SYSTEM = 'System', // General system actions, e.g. settings changes
  WIDGET_SETTINGS = 'Widget Settings', // For widget visibility/customization
  // Add more as needed
}

export interface ActivityLog {
  $id?: string; // Appwrite document ID
  userId?: string; // Appwrite Auth User ID, or system/guest identifier
  userName?: string; // Name of the user, or "Guest", "System"
  userRole?: User['role'] | 'Guest' | 'System'; // Role of the acting user
  action: string; // Description of the action, e.g., "Created Incident", "User Login Failed"
  targetType?: ActivityTargetType; // Type of the entity affected
  targetId?: string; // ID of the entity affected
  targetName?: string; // Name/title of the entity affected, for easier display
  timestamp: string; // ISO Date String
  ipAddress?: string;
  userAgent?: string;
  details?: string; // Additional context/data as JSON string or simple text
  status: ActivityStatus; // Success, Failure, Pending
}

export interface ServiceUptime {
  id: string; // Appwrite document $id
  serviceName: string;
  uptimePercentage: number;
  lastIncident?: {
    date: string;
    duration: string;
    description: string;
  };
  historicalData?: { date: string, uptime: number }[];
}


export enum IncidentType {
  INCIDENT = 'Incident',
  MAINTENANCE = 'Maintenance',
  INFORMATION = 'Information',
}

export enum IncidentImpact {
  NONE = 'None',
  MINOR = 'Minor',
  SIGNIFICANT = 'Significant',
  CRITICAL = 'Critical',
}

// Renamed from IncidentUpdateStatus to IncidentLifecycleStatus and expanded
export enum IncidentLifecycleStatus {
  DETECTED = 'Detected',                // New report, needs vetting
  ACKNOWLEDGED = 'Acknowledged',          // Confirmed by admin, investigation may start
  INVESTIGATING = 'Investigating',        // Actively looking into the cause
  IDENTIFIED = 'Identified',            // Root cause found
  IN_PROGRESS = 'In Progress',            // Fix is being implemented
  MONITORING = 'Monitoring',              // Fix deployed, observing stability
  RESOLVED = 'Resolved',                // Issue fixed and verified (for Incidents)
  COMPLETED = 'Completed',              // Work finished (for Maintenance)
  DISMISSED = 'Dismissed',              // Decided it's not a valid issue or won't be fixed
  SCHEDULED = 'Scheduled',              // For Maintenance: planned
  UPDATE = 'Update',                    // General update message, not a lifecycle change per se
}


export interface IncidentMessage {
  id: string;
  timestamp: string;
  status: IncidentLifecycleStatus; 
  message: string;
  postedBy?: string;
}

export interface Incident {
  id: string;
  $id?: string; // Appwrite document ID
  title: string;
  type: IncidentType;
  impact: IncidentImpact;
  currentLifecycleStatus: IncidentLifecycleStatus; 
  affectedServiceIds: string[];
  messages: IncidentMessage[]; 
  createdAt: string; 
  updatedAt: string; 
  resolvedAt?: string;
  detectedAt?: string; 
  acknowledgedAt?: string; 
  scheduledStartTime?: string;
  scheduledEndTime?: string;
  isPubliclyVisible: boolean;
  severityLevelId?: string; 
  incidentStatusId?: string; 
  debriefRequired?: boolean; // Added for De-Brief system
}

export enum PIRStatus {
  PENDING = 'Pending Review',
  IN_PROGRESS = 'Review In Progress',
  COMPLETED = 'Review Completed',
}

export type PIRSeverityLevel = 'Low' | 'Medium' | 'High' | 'Critical';

export interface IncidentReview {
  id: string; 
  $id?: string; 
  incidentId: string; 
  
  incidentSummaryText?: string; // New field
  rootCauseSummary?: string;
  timelineOfEvents?: string; 
  impactedSystemsText?: string; 
  communicationSent?: string; 
  resolutionSteps?: string;
  whatWentWell?: string; // New field
  whatWentWrong?: string; // New field
  actionItems?: string; // New field
  followUpActions?: string; // Renamed from preventiveActions
  lessonsLearned?: string;
  
  severityLevel?: PIRSeverityLevel; 
  isPreventable?: boolean;
  preventableReasoning?: string;
  
  status: PIRStatus; 
  participants?: string[]; // Renamed from reviewedBy, now an array
  reviewedAt?: string; 

  createdAt: string; 
  updatedAt: string; 
}


export enum ErrorSeverity {
  CRITICAL = 'Critical',
  ERROR = 'Error',
  WARNING = 'Warning',
  INFO = 'Info'
}

export interface ErrorReport {
  id: string; // Appwrite document $id
  timestamp: string; // ISO Date string, custom field
  service: string;
  errorCode: string;
  message: string;
  severity: ErrorSeverity;
  details?: string;
}

export interface AppwriteConfig {
  endpoint: string;
  projectId: string;
  databaseId?: string;
  systemStatusCollectionId?: string;
  userActivityCollectionId?: string; // For existing widget
  activityLogsCollectionId?: string; // For the new comprehensive logging
  serviceUptimeCollectionId?: string;
  errorReportsCollectionId?: string;
  publicServicesCollectionId?: string;
  publicIncidentsCollectionId?: string;
  incidentReviewsCollectionId?: string; 
  adminUsersCollectionId?: string; 
  serviceGroupsCollectionId?: string;
  apiKeysCollectionId?: string; 
  guestIncidentReportsCollectionId?: string;
  severityLevelsCollectionId?: string;
  incidentStatusTypesCollectionId?: string; 
  siteIdentityCollectionId?: string; 
  decisionFlowsCollectionId?: string; 
  activeIncidentFlowsCollectionId?: string; 
  discordSettingsCollectionId?: string; // Added
}

export interface OverallPublicStatus {
    level: SystemStatusLevel;
    message: string;
}

export enum FormMode {
  ADD = 'add',
  EDIT = 'edit',
}

export type PredefinedDateRange = 'allTime' | 'last7days' | 'last30days';

// Filters for Incidents (ManageIncidentsPage)
export interface IncidentFilters {
  dateRange?: { 
    start?: string | null; 
    end?: string | null;
  };
  predefinedRange?: PredefinedDateRange;
  serviceId?: string | null; 
  type?: IncidentType | null;
  status?: IncidentLifecycleStatus | string | null; 
}

// Specific filters for Incident Reviews (ManageReviewsPage)
export interface IncidentReviewFilters {
  dateRange?: { 
    start?: string | null; 
    end?: string | null;
  };
  predefinedRange?: PredefinedDateRange;
  serviceId?: string | null; 
  incidentType?: IncidentType | null; 
  pirStatus?: PIRStatus | null; 
  pirSeverity?: PIRSeverityLevel | null; 
  incidentId?: string; 
}

// Filters for new Activity Log page
export interface ActivityLogFilters {
    dateRange?: { 
        start?: string | null; 
        end?: string | null;
    };
    predefinedRange?: PredefinedDateRange;
    userId?: string; // Search by user ID or name fragment
    action?: string; // Search by action fragment
    targetType?: ActivityTargetType | '';
    targetId?: string;
    status?: ActivityStatus | '';
    role?: User['role'] | 'Guest' | 'System' | '';
}


export interface ApiKey {
  $id?: string; 
  id: string;    
  label: string;
  keyPrefix: string; 
  keySuffix: string; 
  hashedKey: string; 
  userId: string;    
  createdAt: string; 
  lastUsedAt?: string; 
  expiresAt?: string; 
  revokedAt?: string; 
}

export interface NewApiKey extends ApiKey {
  fullKey: string; 
}


export interface WidgetConfig {
  id: string;
  title: string;
  icon: string; 
  defaultEnabled: boolean;
  component: React.FC<any>; 
  requiredRole?: 'Admin' | 'Support'; 
}

export type ClockFormat = '12h' | '24h';
export interface ClockWidgetSettings {
  format: ClockFormat;
}

export type CalendarStartDay = 'sunday' | 'monday';
export interface CalendarWidgetSettings {
  startDay: CalendarStartDay;
}

export type WeatherUnit = 'C' | 'F';
export type WeatherLocationMode = 'auto' | 'manual';
export interface WeatherWidgetSettings {
  unit: WeatherUnit;
  locationMode: WeatherLocationMode;
  manualLocation: string; 
  lastCoords: { lat: number; lon: number } | null;
  apiKey?: string; 
}

export interface AllWidgetCustomizationSettings {
  clock?: ClockWidgetSettings;
  calendar?: CalendarWidgetSettings;
  weather?: WeatherWidgetSettings;
}

export enum GuestIncidentReportStatus {
  NEW = 'New',
  REVIEWED = 'Reviewed',
  ACKNOWLEDGED = 'Acknowledged',
  LINKED_TO_INCIDENT = 'Linked to Incident',
  RESOLVED_VIA_OTHER_MEANS = 'Resolved (Other)',
  DISMISSED = 'Dismissed',
}

export interface GuestIncidentReport {
  $id?: string; 
  id: string; 
  serviceId: string; 
  description: string;
  email?: string;
  submittedAt: string; 
  status: GuestIncidentReportStatus;
  userAgent?: string; 
  notes?: string; 
  officialIncidentId?: string; 
}

export interface SeverityLevel {
  id: string; 
  $id?: string; 
  name: string;
  color: string; 
  priority: number; 
  description?: string;
  createdAt?: string;
  updatedAt?: string;
}

// Added for Field Customization
export interface IncidentStatusDefinition {
  id: string;
  $id?: string;
  name: string;
  description?: string;
  color: string; // Hex color code
  displayOrder: number;
  isEnabled: boolean;
  isDefault: boolean; // Can this be a default status for new incidents?
  createdAt?: string;
  updatedAt?: string;
}

// Added for Site Identity/Branding
export interface SiteIdentitySettings {
  $id?: string; // Appwrite document ID (e.g., 'default_settings')
  siteName: string;
  logoUrl?: string; // URL to the logo (can be base64 data URI if not too large)
  faviconUrl?: string; // URL to the favicon
  footerText: string;
  metaDescription?: string;
  updatedAt?: string; // Managed by Appwrite as $updatedAt
}


// --- Decision Flow System Types ---
export interface DecisionFlowAttachment {
  id: string; // Client-generated
  name: string;
  url: string; // URL or path to stored file
}

export interface DecisionFlowLink {
  id: string; // Client-generated
  label: string;
  url: string;
}

export interface DecisionFlowStep {
  id: string; // Client-generated unique ID within the flow
  title: string;
  description?: string; // General description of the step's purpose
  instructions?: string; // More detailed, potentially markdown-formatted instructions
  attachments?: DecisionFlowAttachment[];
  links?: DecisionFlowLink[];
  required?: boolean; // Default true
  displayOrder: number; // Used for ordering steps in the UI and editor
}

export interface DecisionFlow {
  id: string;
  $id?: string; // Appwrite document ID
  name: string;
  description?: string;
  associatedIncidentTypes?: IncidentType[];
  associatedSeverityLevelIds?: string[]; 
  steps: DecisionFlowStep[];
  createdAt?: string;
  updatedAt?: string;
}

export interface DecisionFlowStepState {
  completed: boolean;
  skipped?: boolean;
  notes?: string;
  completedAt?: string; 
  completedBy?: string; 
}

export enum ActiveFlowStatus {
  NOT_STARTED = 'Not Started', 
  IN_PROGRESS = 'In Progress',
  COMPLETED = 'Completed',
  SKIPPED = 'Skipped', 
}

export interface ActiveIncidentFlow {
  id: string;
  $id?: string; // Appwrite document ID
  incidentId: string; 
  flowId: string;     
  flowNameSnapshot: string; 
  stepStates: Record<string, DecisionFlowStepState>; 
  status: ActiveFlowStatus;
  startedAt: string; 
  completedAt?: string; 
  notes?: string; 
}

// --- Discord Integration Types ---
export interface DiscordSettings {
  $id?: string; // Appwrite document ID (e.g., 'default_discord_config')
  botToken?: string;
  clientId?: string;
  clientSecret?: string; // Consider secure storage/handling
  mainWebhookUrl?: string;
  incidentAlertChannelId?: string;
  maintenanceAlertChannelId?: string;
  guestReportAlertChannelId?: string;
  adminActivityAlertChannelId?: string;
  enableIncidentAlerts?: boolean;
  enableMaintenanceAlerts?: boolean;
  enableGuestReportAlerts?: boolean;
  enableAdminActivityAlerts?: boolean;
  // Rich Presence Settings (Simplified for Admin Panel Config)
  enableRichPresence?: boolean; // For current admin user
  defaultRichPresenceDetails?: string;
  defaultRichPresenceState?: string;
  showSectionInPresence?: boolean;
  showTimestampInPresence?: boolean;
  updatedAt?: string;
}

export interface DiscordEmbedField {
  name: string;
  value: string;
  inline?: boolean;
}

export interface DiscordEmbedFooter {
  text: string;
  icon_url?: string;
}

export interface DiscordEmbedAuthor {
  name: string;
  url?: string;
  icon_url?: string;
}

export interface DiscordEmbed {
  title?: string;
  description?: string;
  url?: string;
  timestamp?: string; // ISO8601 timestamp
  color?: number; // Decimal color code
  footer?: DiscordEmbedFooter;
  author?: DiscordEmbedAuthor;
  fields?: DiscordEmbedField[];
}

export interface DiscordWebhookPayload {
  content?: string;
  username?: string;
  avatar_url?: string;
  embeds?: DiscordEmbed[];
}

// For Rich Presence (conceptual - actual Discord RPC types are more complex)
export interface DiscordRichPresenceActivity {
  details?: string;
  state?: string;
  startTimestamp?: number; // Unix epoch ms
  // largeImageKey?: string;
  // largeImageText?: string;
  // smallImageKey?: string;
  // smallImageText?: string;
  // partyId?: string;
  // partySize?: number;
  // partyMax?: number;
}
